{"meta":{"title":"天律界","subtitle":"精诚所至，金石为开","description":"天律界中子的Github page","author":"天律界中子","url":"http://yoursite.com"},"pages":[{"title":"","date":"2018-04-29T13:47:05.629Z","updated":"2018-04-29T13:47:05.629Z","comments":true,"path":"About/index.html","permalink":"http://yoursite.com/About/index.html","excerpt":"","text":"简介图像处理算法工程师一枚，以“天律界中子”的昵称混迹于网络江湖。 教育经历 2009-2013 南昌大学"},{"title":"","date":"2018-04-28T14:23:30.645Z","updated":"2018-04-28T14:23:30.645Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-04-28T14:24:22.605Z","updated":"2018-04-28T14:24:22.605Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"C++11高精度计时器","slug":"cpp-timer","date":"2018-06-05T14:26:41.000Z","updated":"2018-06-05T15:07:31.163Z","comments":true,"path":"2018/06/05/cpp-timer/","link":"","permalink":"http://yoursite.com/2018/06/05/cpp-timer/","excerpt":"","text":"做图像处理算法时，免不了要测量函数的运行时间。以前我都是使用OpenCV的计时函数cv::getTickCount()和cv::getTickFrequency()，但是这样一来，在不使用OpenCV的项目中就没法用了。幸好C++11增加了std::chrono库，可以很方便地实现跨平台的时间测量。于是我封装了一个简单的计时器类，这样只要将其简单地添加到项目中，就可以直接使用了。此计时器单位为毫秒，但可以精确到微秒级。 1234567891011121314151617181920212223242526272829303132333435#include &lt;iostream&gt;#include &lt;chrono&gt;class Timer&#123;public: Timer() : t1(res::zero()) , t2(res::zero()) &#123; tic(); &#125; ~Timer() &#123;&#125; void tic() &#123; t1 = clock::now(); &#125; void toc(const char* str) &#123; t2 = clock::now(); std::cout &lt;&lt; str &lt;&lt; \" time: \" &lt;&lt; std::chrono::duration_cast&lt;res&gt;(t2 - t1).count() / 1e3 &lt;&lt; \"ms.\" &lt;&lt; std::endl; &#125;private: typedef std::chrono::high_resolution_clock clock; typedef std::chrono::microseconds res; clock::time_point t1; clock::time_point t2;&#125;; 测试代码如下： 1234567891011121314int main()&#123; Timer timer; std::cout &lt;&lt; \"1\" &lt;&lt; std::endl; timer.toc(\"output 1\"); timer.tic(); std::cout &lt;&lt; \"2\" &lt;&lt; std::endl; timer.toc(\"output 2\"); system(\"pause\"); return 0;&#125; 输出如下： 123451output 1 time: 0.26ms.2output 2 time: 0.039ms.请按任意键继续. . .","categories":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"提取图像细节的两种方法","slug":"two-ways-of-extracting-detail-of-image","date":"2018-04-29T13:50:14.000Z","updated":"2018-04-29T13:50:35.349Z","comments":true,"path":"2018/04/29/two-ways-of-extracting-detail-of-image/","link":"","permalink":"http://yoursite.com/2018/04/29/two-ways-of-extracting-detail-of-image/","excerpt":"","text":"一幅图像可以分解为两层：底层(base layer)和细节层(detail layer)。底层包含图像的低频信息，反映了图像在大尺度上的强度变化；细节层包含图像的高频信息，反映了图像在小尺度上的细节。分解图像有两种方式，以下分别进行解释。 1. 加性分解要获取图像的底层，即图像的低频信息，使用低通滤波(如均值滤波(mean filter)，高斯滤波(gaussian filter)，导向滤波(guided filter))对图像进行滤波即可：$$B = f(I) $$其中$I$表示要分解的图像，$f(\\cdot)$表示低通滤波操作，$B$为提取的底层。 提取底层后，使用源图像减去底层，即为细节层：$$D = I - B$$其中$D$表示提取的细节层。 因为底层加上细节层即为源图像，所以我称此种分解方法为加性分解，对应于加性噪声。关于此种方法的应用，可以参见[1]。 2. 乘性分解获取底层的方法与\\textbf{加性分解}相同。然后使用源图像除以底层，即可得到细节层：$$D = \\frac{I + \\epsilon}{B + \\epsilon}$$其中$\\epsilon$为一个很小的常数，以防止除零错误。 因为底层乘以细节层即为源图像，所以我称此种分解方法为乘性分解，对应于乘性噪声。关于此种方法的应用，可以参见[2]。在其他文章中，此处得到的细节层也称为商图像(quotient image)[3]或比例图像(ratio image)[4]。 3. 代码及效果123456789101112131415161718192021222324252627282930313233343536373839404142434445// 图像细节提取。// 编程环境：Visual Studio Community 2015 + OpenCV 3.3.0#include \"opencv2/core/core.hpp\"#include \"opencv2/imgcodecs/imgcodecs.hpp\"#include \"opencv2/imgproc/imgproc.hpp\"#include \"opencv2/highgui/highgui.hpp\"int main()&#123; cv::Mat I = cv::imread(\"im.png\"); if (I.empty()) &#123; return -1; &#125; I.convertTo(I, CV_32FC3); cv::Mat B; cv::boxFilter(I, B, -1, cv::Size(31, 31)); // 1. 加性分解 cv::Mat D1 = I - B; // 2. 乘性分解 const float epsilon = 1.0f; cv::Mat D2 = (I + epsilon) / (B + epsilon); // 显示图像 I.convertTo(I, CV_8UC3); cv::imshow(\"源图像\", I); B.convertTo(B, CV_8UC3); cv::imshow(\"Base layer\", B); D1 = cv::abs(D1); // 因为包含负数，所以取绝对值 D1.convertTo(D1, CV_8UC3); cv::imshow(\"Detail layer 1\", D1); cv::normalize(D2, D2, 0.0, 255.0, cv::NORM_MINMAX); // 归一化 D2.convertTo(D2, CV_8UC3); cv::imshow(\"Detail layer 2\", D2); cv::waitKey(); return 0;&#125; 图1：源图像 图2：Base Layer 图3：Detail Layer1 图4：Detail Layer2 4. 应用提取图像的细节层后，可以进行细节增强(detail enhancement)或细节转移(detail transfer)[2]等。 5. 参考文献[1] S. Li, X. Kang, and J. Hu. Image fusion with guided fltering. IEEE Transactions on Image Processing, 22(7):2864–2875, July 2013. [2] Georg Petschnigg, Richard Szeliski, Maneesh Agrawala, Michael Cohen, Hugues Hoppe, and Kentaro Toyama. Digital photography with ﬂash and no-ﬂash image pairs. In ACM transactions on graphics (TOG), volume 23, pages 664–672. ACM, 2004. [3] Amnon Shashua and Tammy Riklin-Raviv. The quotient image: Class-based re-rendering and recognition with varying illuminations. IEEE Transactions on Pattern Analysis and Machine Intelligence, 23(2):129–139, 2001. [4] Zicheng Liu, Ying Shan, and Zhengyou Zhang. Expressive expression mapping with ratio images. In Proceedings of the 28th annual conference on Computer graphics and interactive techniques, pages 271–276. ACM, 2001.","categories":[{"name":"图像处理","slug":"图像处理","permalink":"http://yoursite.com/categories/图像处理/"}],"tags":[{"name":"image-processing","slug":"image-processing","permalink":"http://yoursite.com/tags/image-processing/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-28T15:23:59.783Z","updated":"2018-04-28T14:34:14.543Z","comments":true,"path":"2018/04/28/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"test","slug":"test","permalink":"http://yoursite.com/tags/test/"}]}]}